## Perguntas:
## VocÃª deve criar, na variÃ¡vel alunos, um data frame utilizando os vetores fornecidos. AlÃ©m disso, sempre que utilizar algum dado jÃ¡ existente no arquivo, vocÃª deve referir-se a esse data frame (ou seja, vocÃª sÃ³ pode utilizar os vetores fornecidos para criar esse data frame).
alunos <- data.frame(ids, p1, p2, p3, p4)
ids <- c(172742, 172773, 172825, 172839, 172967, 173149, 173204, 173370, 174096, 174355, 174437, 174487, 174488, 174928, 175380, 175832, 176859, 176914, 176940, 177388, 177554, 177609, 177643, 177825, 177925, 178085, 178137, 178377, 178397, 178525, 178664, 178674, 178740, 178779, 181987, 182039, 182049, 182901, 183024, 183143, 183517, 183984, 184400, 185247, 185820, 186218, 187014, 187217, 188078, 188494, 188548)
p1 <- c(6, 5.1, 7, 3.9, 8.9, 2.6, 0, 0.5, 3.3, 8, 4.8, 4.4, 3.1, 8.3, 1.4, 0.5, 1.1, 5.8, 9.5, 5.1, 4.3, 7.5, 4.8, 1.8, 5.4, 9.5, 4.8, 4.8, 3.3, 8.4, 4.4, 7.8, 8.8, 8.9, 0, 7, 6.9, 5.8, 6.3, 8.8, 6.3, 8.6, 6.1, 5, 3.8, 4.5, 5.4, 8, 1.9, 1.6, 1.6)
p2 <- c(8.6, 8.5, 6.8, 9.1, 5.3, 4.8, 0, 0, 0, 8.9, 6.2, 6.5, 2.9, 6.8, 3.5, 4.8, 6.1, 7.8, 8.9, 8, 5.6, 7.2, 8.9, 0, 7.6, 9.8, 3.3, 8.2, 7.6, 8.8, 0, 9.4, 9.3, 8.1, 0, 8, 9.6, 0, 8.9, 9, 4.5, 5.5, 6.8, 8.6, 0, 9.6, 6.8, 7.8, 5.9, 2.9, 2.3)
p3 <- c(7.6, 7.1, 6.9, 7, 6.7, 3.9, 0, 0.2, 1.3, 8.5, 5.6, 5.6, 3, 7.4, 2.7, 3.1, 4.1, 7, 9.1, 6.9, 5.1, 7.3, 7.2, 0.7, 6.7, 9.6, 3.9, 6.8, 5.9, 8.6, 1.8, 8.7, 9.1, 8.4, 0, 7.6, 8.5, 2.3, 7.8, 8.9, 5.2, 6.8, 6.5, 7.2, 1.5, 7.6, 6.2, 7.9, 4.3, 2.4, 2)
p4 <- c(9.9, 2.3, 10, 7.3, 8.6, 8.9, 0, 9.5, 4.5, 7.9, 8.9, 8.6, 8.2, 6.4, 2.7, 10, 8.6, 8.3, 9.4, 9.5, 8.6, 9.5, 9.1, 0, 10, 7.8, 9.9, 8.2, 6.8, 8.7, 3.2, 6.9, 6.3, 8.9, 3.2, 10, 5.3, 6.4, 7.9, 7.8, 8.2, 8.6, 7.3, 7.5, 5, 8.3, 10, 4.8, 10, 6.4, 7.9)
rowMins <- function(m) {
apply(m, 1, min)
}
## Perguntas:
## VocÃª deve criar, na variÃ¡vel alunos, um data frame utilizando os vetores fornecidos. AlÃ©m disso, sempre que utilizar algum dado jÃ¡ existente no arquivo, vocÃª deve referir-se a esse data frame (ou seja, vocÃª sÃ³ pode utilizar os vetores fornecidos para criar esse data frame).
alunos <- data.frame(ids, p1, p2, p3, p4)
alunos
summary(alunos)
## Perguntas:
## VocÃª deve criar, na variÃ¡vel alunos, um data frame utilizando os vetores fornecidos. AlÃ©m disso, sempre que utilizar algum dado jÃ¡ existente no arquivo, vocÃª deve referir-se a esse data frame (ou seja, vocÃª sÃ³ pode utilizar os vetores fornecidos para criar esse data frame).
alunos <- data.frame(p1, p2, p3, p4)
names(alunos) <- ids
row.names(alunos) <- ids
alunos
summary(alunos)
alunos["p1"]
alunos["p1"]^2
rowMins(alunos)
sort(alunos)
sort(alunos["p1"])
alunos
summary(alunos)
str(alunos)
sort(alunos[1])
sort(alunos[[1]])
apply(alunos, 1, sort)
## VocÃª deve salvar no vetor medquad a mÃ©dia final de cada aluno (mÃ©dia quadrÃ¡tica das provas, desconsiderando a menor nota obtida), com duas casas decimais.
# Primeiro precisamos selecionar os 3 maiores elementos linha a linha
notas_ordenadas <- apply(alunos, 1, sort)
notas_ordenadas
t(notas_ordenadas)
medquad <- notas_ordenadas[[2]]^2 + notas_ordenadass[[3]]^2 + notas_ordenadas[[4]]; medquad
## VocÃª deve salvar no vetor medquad a mÃ©dia final de cada aluno (mÃ©dia quadrÃ¡tica das provas, desconsiderando a menor nota obtida), com duas casas decimais.
# Primeiro precisamos selecionar os 3 maiores elementos linha a linha
notas_ordenadas <- t(apply(alunos, 1, sort))
## VocÃª deve salvar nas variÃ¡veis mp1, mp2, mp3 e mp4 a mÃ©dia aritmÃ©tica das notas das provas 1, 2, 3 e 4, respectivamente.
mp1 <-
mp2 <-
mp3 <-
mp4 <-
## VocÃª deve salvar nas variÃ¡veis d1, dp2, dp3 e dp4 o desvio padrÃ£o das notas das provas 1, 2, 3 e 4, respectivamente.
dp1 <-
dp2 <-
dp3 <-
dp4 <-
medquad <- notas_ordenadas[[2]]^2 + notas_ordenadass[[3]]^2 + notas_ordenadas[[4]]; medquad
## VocÃª deve salvar no vetor medquad a mÃ©dia final de cada aluno (mÃ©dia quadrÃ¡tica das provas, desconsiderando a menor nota obtida), com duas casas decimais.
# Primeiro precisamos selecionar os 3 maiores elementos linha a linha
notas_ordenadas <- t(apply(alunos, 1, sort))
medquad <- notas_ordenadas[[2]]^2 + notas_ordenadas[[3]]^2 + notas_ordenadas[[4]]; medquad
notas_ordenadas
notas_ordenadas[[1]]
notas_ordenadas[1
]
notas_ordenadas[1]
## VocÃª deve salvar no vetor medquad a mÃ©dia final de cada aluno (mÃ©dia quadrÃ¡tica das provas, desconsiderando a menor nota obtida), com duas casas decimais.
# Primeiro precisamos selecionar os 3 maiores elementos linha a linha
notas_ordenadas <- apply(alunos, 1, sort)
notas_ordenadas[1]
notas_ordenadas
rowMins(alunos)
rowMins(alunos[,])
rowMins(alunos[,1])
rowMins(alunos[,c(1:3])
rowMins(alunos[,c(1:3)]
)
rowMins(alunos[,c(1:3)])[1]
notas_ordenadas
notas_ordenadas[1]
notas_ordenadas[1,]
t(notas_ordenadas)[1,]
t(notas_ordenadas)[,1]
medquad <- notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]; medquad
## VocÃª deve salvar no vetor medquad a mÃ©dia final de cada aluno (mÃ©dia quadrÃ¡tica das provas, desconsiderando a menor nota obtida), com duas casas decimais.
# Primeiro precisamos selecionar os 3 maiores elementos linha a linha
notas_ordenadas <- t(apply(alunos, 1, sort))
medquad <- notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]; medquad
alunos
head(alunos)
medquad <- notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]^2; medquad
medquad <- (notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]^2)/3; medquad
medquad <- ((notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]^2)/3)^0.5; medquad
## VocÃª deve salvar nas variÃ¡veis mp1, mp2, mp3 e mp4 a mÃ©dia aritmÃ©tica das notas das provas 1, 2, 3 e 4, respectivamente.
mp1 <- mean(alunos["p1"])
alunos
alunos["p1"]
alunos$p1
## VocÃª deve salvar nas variÃ¡veis mp1, mp2, mp3 e mp4 a mÃ©dia aritmÃ©tica das notas das provas 1, 2, 3 e 4, respectivamente.
mp1 <- mean(alunos$p1)
mp2 <- mean(alunos$p2)
mp3 <- mean(alunos$p3)
mp4 <- mean(alunos$p4)
mp4
## VocÃª deve salvar nas variÃ¡veis d1, dp2, dp3 e dp4 o desvio padrÃ£o das notas das provas 1, 2, 3 e 4, respectivamente.
dp1 <- std(alunos$p1)
dp2 <- std(alunos$p2)
dp3 <- std(alunos$p3)
dp4 <- std(alunos$p4)
## VocÃª deve salvar nas variÃ¡veis d1, dp2, dp3 e dp4 o desvio padrÃ£o das notas das provas 1, 2, 3 e 4, respectivamente.
dp1 <- sd(alunos$p1)
dp2 <- sd(alunos$p2)
dp3 <- sd(alunos$p3)
dp4 <- sd(alunos$p4)
medquad
t(medquad)
medquad
## Perguntas:
## VocÃª deve criar, na variÃ¡vel alunos, um data frame utilizando os vetores fornecidos. AlÃ©m disso, sempre que utilizar algum dado jÃ¡ existente no arquivo, vocÃª deve referir-se a esse data frame (ou seja, vocÃª sÃ³ pode utilizar os vetores fornecidos para criar esse data frame).
alunos <- data.frame(p1, p2, p3, p4)
## VocÃª deve salvar no vetor medquad a mÃ©dia final de cada aluno (mÃ©dia quadrÃ¡tica das provas, desconsiderando a menor nota obtida), com duas casas decimais.
# Primeiro precisamos selecionar os 3 maiores elementos linha a linha
notas_ordenadas <- t(apply(alunos, 1, sort))
notas_ordenadas
medquad <- ((notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]^2)/3)^0.5; medquad
row.names(medquad) <- ids
alunos
notas_ordenadas
medquad
medquad <- data.frame(valores, row.names = ids)
valores <- ((notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]^2)/3)^0.5; medquad
medquad <- data.frame(valores, row.names = ids)
medquad <- data.frame(valores, row.names = ids); medquad
medias <- ((notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]^2)/3)^0.5
medquad <- data.frame(valores, row.names = ids); medquad
media <- ((notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]^2)/3)^0.5
medquad <- data.frame(valores, row.names = ids); medquad
## VocÃª deve salvar no vetor medquad a mÃ©dia final de cada aluno (mÃ©dia quadrÃ¡tica das provas, desconsiderando a menor nota obtida), com duas casas decimais.
# Primeiro precisamos selecionar os 3 maiores elementos linha a linha
notas_ordenadas <- t(apply(alunos, 1, sort))
media <- ((notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]^2)/3)^0.5
medquad <- data.frame(media, row.names = ids); medquad
medquad["188548"]
medquad["188548"]
medquad$188548
medquad["188548",]
media <- round(((notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]^2)/3)^0.5)
medquad <- data.frame(media, row.names = ids); medquad
media <- round(((notas_ordenadas[,2]^2 + notas_ordenadas[,3]^2 + notas_ordenadas[,4]^2)/3)^0.5, digits = 2)
medquad <- data.frame(media, row.names = ids); medquad
dia <- c(01, 01, 02, 02, 02, 02, 03, 03, 03, 04, 04, 04, 05, 05, 06, 06, 06, 06, 07, 07, 07, 07, 07, 08, 08, 08, 08, 09, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15)
cidade <- c('Campinas', 'Vinhedo', 'Campinas', 'Limeira', 'Campinas', 'Vinhedo', 'Campinas', 'Vinhedo', 'Limeira', 'Campinas', 'Vinhedo', 'Limeira', 'Campinas', 'Vinhedo', 'Campinas', 'Vinhedo', 'Campinas', 'Vinhedo', 'Vinhedo', 'Campinas', 'Vinhedo', 'Vinhedo', 'Limeira', 'Limeira', 'Campinas', 'Vinhedo', 'Limeira', 'Campinas', 'Vinhedo', 'Campinas', 'Limeira', 'Vinhedo', 'Campinas', 'Vinhedo', 'Campinas', 'Limeira', 'Vinhedo', 'Limeira', 'Vinhedo', 'Campinas', 'Limeira', 'Vinhedo', 'Limeira', 'Campinas', 'Limeira', 'Limeira', 'Campinas', 'Campinas', 'Limeira', 'Limeira')
chuva <- c(0.15, 0.02, 0.01, 0.13, 0.12, 2.19, 1.11, 0.76, 2.98, 0.45, 2.63, 0.76, 0.38, 1.26, 2.57, 0.54, 9.87, 3.41, 2.96, 1.37, 6.78, 13.87, 0.11, 1.84, 12.19, 2.86, 11.99, 2.01, 2.32, 11.2, 0.48, 4.33, 13.32, 1.05, 0.56, 1.92, 1.81, 7.66, 2.93, 1.17, 0.7, 2.95, 0.37, 1.08, 1.31, 3.22, 0.49, 1.86, 2.3, 7.65)
## Perguntas:
## VocÃª deve criar, na variÃ¡vel leituras, um data frame utilizando os vetores fornecidos e, sempre que utilizar algum dado desses vetores, referir-se apenas a esse data frame (ou seja, vocÃª sÃ³ pode utilizar os vetores fornecidos para criar esse data frame).
leituras <- data.frame(dia, cidade, chuva)
## Perguntas:
## VocÃª deve criar, na variÃ¡vel leituras, um data frame utilizando os vetores fornecidos e, sempre que utilizar algum dado desses vetores, referir-se apenas a esse data frame (ou seja, vocÃª sÃ³ pode utilizar os vetores fornecidos para criar esse data frame).
leituras <- data.frame(dia, cidade, chuva); leituras
leituras[!duplicated(df[,c('dia', 'cidade')], fromLast = TRUE),]
leituras[!duplicated(df[,c(1,2)], fromLast = TRUE),]
leituras[!duplicated(leituras[,c(1,2)], fromLast = TRUE),]
duplicated(leituras)
duplicated(leituras[, c(1,2)])
leituras[duplicated(leituras[, c(1,2)])]
duplicated(leituras[, c(1,2)])
leituras[duplicated(leituras[, c(1,2)]),]
leituras[!duplicated(leituras[, c(1,2)]),]
leituras[duplicated(leituras[, c(1,2)]),]
leituras[!duplicated(leituras[, c(1,2)], fromLast = TRUE),]
leituras$cidade
leituras$cidade == "Campinas"
leituras[leituras$cidade == "Campinas"]
leituras[leituras$cidade == "Campinas",]
## Salve nas variÃ¡veis acumCamp, acumLim e acumVin o total de chuvas observados nos 15 dias nas cidades de Campinas, Limeira e Vinhedo, respectivamente.
acumCamp <- sum(leituras[leituras$cidade == "Campinas", 3])
acumCamp
rank(leituras[leituras$cidade == "Campinas",3])
max(rank(leituras[leituras$cidade == "Campinas",3]))
leituras[max(rank(leituras[leituras$cidade == "Campinas",3]))]
leituras[max(rank(leituras[leituras$cidade == "Campinas",3])), 1]
leituras[max(rank(leituras[leituras$cidade == "Campinas",3])), 2]
leituras[max(rank(leituras[leituras$cidade == "Campinas",3])), ]
acumCamp[max(rank(leituras[leituras$cidade == "Campinas",3])), ]
acumCamp[max(rank(leituras[leituras$cidade == "Campinas",3])), ]
max(rank(leituras[leituras$cidade == "Campinas",3]))
length(accuCamp)
length(acumCamp)
acumCamp[1]
acumCamp[2]
acumCamp[3]
leituras[leituras$cidade == "Campinas", 3]
acumCamp <- sum(dadosCamp)
## Salve nas variÃ¡veis acumCamp, acumLim e acumVin o total de chuvas observados nos 15 dias nas cidades de Campinas, Limeira e Vinhedo, respectivamente.
dadosCamp <- leituras[leituras$cidade == "Campinas", 3]
dadosLim <- leituras[leituras$cidade == "Limeira", 3]
dadosVin <- leituras[leituras$cidade == "Vinhedo", 3]
acumCamp <- sum(dadosCamp)
acumLim <- sum(dadosLim)
acumVin <- sum(dadosVin)
acumCamp <- sum(dadosCamp); acumCamp
acumLim <- sum(dadosLim); acumLim
acumVin <- sum(dadosVin); acumVin
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
dmaxCamp <- dadosCamp[max(rank(dadosCamp))]; dmaxCamp
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
dmaxCamp <- dadosCamp[max(rank(dadosCamp)), ]; dmaxCamp
max(rank(dadosCamp))
dadosCamp[18]
acumCamp <- sum(dadosCamp[, 3]); acumCamp
## Salve nas variÃ¡veis acumCamp, acumLim e acumVin o total de chuvas observados nos 15 dias nas cidades de Campinas, Limeira e Vinhedo, respectivamente.
dadosCamp <- leituras[leituras$cidade == "Campinas", ]
dadosLim <- leituras[leituras$cidade == "Limeira", ]
dadosVin <- leituras[leituras$cidade == "Vinhedo", ]
acumCamp <- sum(dadosCamp[, 3]); acumCamp
acumLim <- sum(dadosLim[, 3]); acumLim
acumVin <- sum(dadosVin[, 3]); acumVin
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
dmaxCamp <- dadosCamp[max(rank(dadosCamp)), ]; dmaxCamp
dadosCamp[18, ]
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
dmaxCamp <- dadosCamp[max(rank(dadosCamp)), ]; dmaxCamp[1]
dadosCamp[max(rank(dadosCamp)), ]
dadosCamp[18, ]
max(rank(dadosCamp))
max(rank(dadosCamp[, 3])), ]
max(rank(dadosCamp[, 3]))
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
dmaxCamp <- dadosCamp[max(rank(dadosCamp[, 3])), ]; dmaxCamp[1]
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
dmaxCamp <- dadosCamp[max(rank(dadosCamp[, 3])), ]; dmaxCamp[[1]]
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
dmaxCamp <- dadosCamp[max(rank(dadosCamp[, 3])), ][[1]]; dmaxCamp
dmaxVin <- dadosVin[max(rank(dadosVin[, 3])), ][[1]]; dmaxVin
dmaxLim <- dadosLim[max(rank(dadosLim[, 3])), ][[1]]; dmaxLim
leituras
dadosLim
## Perguntas:
## VocÃª deve criar, na variÃ¡vel leituras, um data frame utilizando os vetores fornecidos e, sempre que utilizar algum dado desses vetores, referir-se apenas a esse data frame (ou seja, vocÃª sÃ³ pode utilizar os vetores fornecidos para criar esse data frame).
leituras <- data.frame(dia, cidade, chuva); leituras
## VocÃª deve remover do data frame leituras todas as linhas $i$ tais que exista uma linha $j$ com $j > i$ e que os campos contendo dia e cidade sejam o mesmo em $i$ e $j$.
leituras <- leituras[!duplicated(leituras[, c(1,2)], fromLast = TRUE),]
leituras
## Salve nas variÃ¡veis acumCamp, acumLim e acumVin o total de chuvas observados nos 15 dias nas cidades de Campinas, Limeira e Vinhedo, respectivamente.
dadosCamp <- leituras[leituras$cidade == "Campinas", ]
dadosLim <- leituras[leituras$cidade == "Limeira", ]
dadosVin <- leituras[leituras$cidade == "Vinhedo", ]
acumCamp <- sum(dadosCamp[, 3]); acumCamp
acumLim <- sum(dadosLim[, 3]); acumLim
acumVin <- sum(dadosVin[, 3]); acumVin
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
dmaxCamp <- dadosCamp[max(rank(dadosCamp[, 3])), ][[1]]; dmaxCamp
dmaxLim <- dadosLim[max(rank(dadosLim[, 3])), ][[1]]; dmaxLim
dmaxVin <- dadosVin[max(rank(dadosVin[, 3])), ][[1]]; dmaxVin
## VocÃª deve salvar nas variÃ¡veis dminCamp, dminLim e dminVin, dentre os dados existentes em seu data frame, o dia do mÃªs com menor leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ­nimo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
dminCamp <-
dminLim <-
dminVin <-
dadosLim
dadosLim
max(rank(dadosLim[, 3]))
dadosLim[, 3]
rank(dadosLin[, 3])
rank(dadosLim[, 3])
max(rank(dadosLim[, 3]))
order(rank(dadosLim[, 3]))
order(rank(dadosLim[, 3]))
dadosLim[, 3])
dadosLim[, 3]
rank(dadosLim[, 3])
order(dadosLim[, 3])
rank(dadosCamp)
dadosCamp
rank(dadosCamp[, 3])
rank(dadosLim[, 3])
order(dadosLim[, 3])
order(dadosLim[, 3])[lengthorder(dadosLim[, 3])]
order(dadosLim[, 3])[length(order(dadosLim[, 3]))]
order(dadosLim[, 3])[length(order(dadosLim[, 3]))]
## VocÃª deve salvar nas variÃ¡veis dminCamp, dminLim e dminVin, dentre os dados existentes em seu data frame, o dia do mÃªs com menor leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ­nimo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
posicao_maior_valor_campinas =  order(dadosCamp[, 3])[length(order(dadosCamp[, 3]))]
posicao_maior_valor_limeira = order(dadosLim[, 3])[length(order(dadosLim[, 3]))]
posicao_maior_valor_vinhedo = order(dadosVin[, 3])[length(order(dadosLim[, 3]))]
posicao_maior_valor_limeira
posicao_maior_valor_campinas
posicao_maior_valor_vinhedo
dminCamp <- dadosCamp[posicao_maior_valor_campinas]; dminCamp
dminCamp <- dadosCamp[posicao_maior_valor_campinas, ]; dminCamp
dminCamp <- dadosCamp[posicao_maior_valor_campinas, ][[1]]; dminCamp
dminLim <- dadosLim[posicao_maior_valor_limeira, ][[1]]; dminLim
dminVin <- dadosVin[posicao_maior_valor_vinhedo, ][[1]]; dminVin
dadosCamp
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
dmaxCamp <- dadosCamp[max(rank(dadosCamp[, 3])), ][[1]]; dmaxCamp
dmaxLim <- dadosLim[max(rank(dadosLim[, 3])), ][[1]]; dmaxLim
dmaxVin <- dadosVin[max(rank(dadosVin[, 3])), ][[1]]; dmaxVin
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
posicao_menor_valor_campinas =  order(dadosCamp[, 3])[1]
posicao_menor_valor_limeira = order(dadosLim[, 3])[1]
posicao_menor_valor_vinhedo = order(dadosVin[, 3])[1]
dmaxCamp <- dadosCamp[max(rank(dadosCamp[, 3])), ][[1]]; dmaxCamp
dmaxLim <- dadosLim[max(rank(dadosLim[, 3])), ][[1]]; dmaxLim
dmaxVin <- dadosVin[max(rank(dadosVin[, 3])), ][[1]]; dmaxVin
dadosCamp
order(dadosCamp[, 3])[1]
dmaxCamp <- dadosCamp[pos_menor_val_camp, ][[1]]; dmaxCamp
## VocÃª deve salvar nas variÃ¡veis dmaxCamp, dmaxLim e dmaxVin, dentre os dados existentes em seu data frame, o dia do mÃªs com maior leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ¡ximo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
pos_menor_val_camp =  order(dadosCamp[, 3])[1]
pos_menor_val_lim = order(dadosLim[, 3])[1]
pos_menor_val_vin = order(dadosVin[, 3])[1]
dmaxCamp <- dadosCamp[pos_menor_val_camp, ][[1]]; dmaxCamp
dmaxLim <- dadosLim[pos_menor_val_lim, ][[1]]; dmaxLim
dmaxVin <- dadosVin[pos_menor_val_vin, ][[1]]; dmaxVin
## VocÃª deve salvar nas variÃ¡veis dminCamp, dminLim e dminVin, dentre os dados existentes em seu data frame, o dia do mÃªs com menor leitura de chuva nas cidades de Campinas, Limeira e Vinhedo, respectivamente. Se existir mais de um dia com o valor mÃ­nimo, vocÃª pode escolher qualquer um dos dias. Caso uma cidade nÃ£o tenha leitura em algum dia, aquele dia deve ser ignorado.
pos_maior_val_camp =  order(dadosCamp[, 3])[length(order(dadosCamp[, 3]))]
pos_maior_val_lim = order(dadosLim[, 3])[length(order(dadosLim[, 3]))]
pos_maior_val_vin = order(dadosVin[, 3])[length(order(dadosLim[, 3]))]
dminCamp <- dadosCamp[pos_maior_val_camp, ][[1]]; dminCamp
dminLim <- dadosLim[pos_maior_val_lim, ][[1]]; dminLim
dminVin <- dadosVin[pos_maior_val_vin, ][[1]]; dminVin
ids <- c(172742, 172773, 172825, 172839, 172967, 173149, 173204, 173370, 174096, 174355, 174437, 174487, 174488, 174928, 175380, 175832, 176859, 176914, 176940, 177388, 177554, 177609, 177643, 177825, 177925, 178085, 178137, 178377, 178397, 178525, 178664, 178674, 178740, 178779, 181987, 182039, 182049, 182901, 183024, 183143, 183517, 183984, 184400, 185247, 185820, 186218, 187014, 187217, 188078, 188494, 188548)
p1 <- c(6, 5.1, 7, 3.9, 8.9, 2.6, 0, 0.5, 3.3, 8, 4.8, 4.4, 3.1, 8.3, 1.4, 0.5, 1.1, 5.8, 9.5, 5.1, 4.3, 7.5, 4.8, 1.8, 5.4, 9.5, 4.8, 4.8, 3.3, 8.4, 4.4, 7.8, 8.8, 8.9, 0, 7, 6.9, 5.8, 6.3, 8.8, 6.3, 8.6, 6.1, 5, 3.8, 4.5, 5.4, 8, 1.9, 1.6, 1.6)
p2 <- c(8.6, 8.5, 6.8, 9.1, 5.3, 4.8, 0, 0, 0, 8.9, 6.2, 6.5, 2.9, 6.8, 3.5, 4.8, 6.1, 7.8, 8.9, 8, 5.6, 7.2, 8.9, 0, 7.6, 9.8, 3.3, 8.2, 7.6, 8.8, 0, 9.4, 9.3, 8.1, 0, 8, 9.6, 0, 8.9, 9, 4.5, 5.5, 6.8, 8.6, 0, 9.6, 6.8, 7.8, 5.9, 2.9, 2.3)
p3 <- c(7.6, 7.1, 6.9, 7, 6.7, 3.9, 0, 0.2, 1.3, 8.5, 5.6, 5.6, 3, 7.4, 2.7, 3.1, 4.1, 7, 9.1, 6.9, 5.1, 7.3, 7.2, 0.7, 6.7, 9.6, 3.9, 6.8, 5.9, 8.6, 1.8, 8.7, 9.1, 8.4, 0, 7.6, 8.5, 2.3, 7.8, 8.9, 5.2, 6.8, 6.5, 7.2, 1.5, 7.6, 6.2, 7.9, 4.3, 2.4, 2)
p4 <- c(9.9, 2.3, 10, 7.3, 8.6, 8.9, 0, 9.5, 4.5, 7.9, 8.9, 8.6, 8.2, 6.4, 2.7, 10, 8.6, 8.3, 9.4, 9.5, 8.6, 9.5, 9.1, 0, 10, 7.8, 9.9, 8.2, 6.8, 8.7, 3.2, 6.9, 6.3, 8.9, 3.2, 10, 5.3, 6.4, 7.9, 7.8, 8.2, 8.6, 7.3, 7.5, 5, 8.3, 10, 4.8, 10, 6.4, 7.9)
rowMins <- function(m) {
apply(m, 1, min)
}
## Perguntas:
## VocÃª deve criar, na variÃ¡vel alunos, um data frame utilizando os vetores fornecidos. AlÃ©m disso, sempre que utilizar algum dado jÃ¡ existente no arquivo, vocÃª deve referir-se a esse data frame (ou seja, vocÃª sÃ³ pode utilizar os vetores fornecidos para criar esse data frame).
alunos <- data.frame(p1, p2, p3, p4)
orderRow <- function(m) {
apply(m, 1, sort)
}
orderRow(alunos)
t(orderRow(alunos))
acumCamp <- sum(dadosCamp[, 3]); acumCamp
